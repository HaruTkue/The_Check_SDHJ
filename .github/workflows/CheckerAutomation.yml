name: Automation Add

on:
  pull_request:
    types:
     - opened
     
permissions:
  contents: write
  pull-requests: write
  
jobs:
  get-request:
    if: ${{ github.event.pull_request.title}} == 'AddService'
    name: Automation
    runs-on: ubuntu-latest

    
    steps: 
      - name: checkout
        uses: actions/checkout@v4 
        
      - name: Get PullRequestData
        #サブドメインをプルリク内から取得する
        #取得したサブドメインをDEFAULT_DOMAINに格納
        run: |
         DOMAIN=${{ github.event.pull_request.body }}
         echo "DEFAULT_DOMAIN=$DOMAIN" >> $GITHUB_ENV
         
         
      - name: Get DNSRecord
        #取得したサブドメインからCNAME/Aレコードを取得する
        run: |
         RECORD=$(dig +short CNAME "$DEFAULT_DOMAIN" | tr -d '\n')
         A_RECORD=$(dig +short A "$DEFAULT_DOMAIN" | head -n1 | tr -d '\n')
         echo "RECORD=$RECORD" >>$GITHUB_ENV
         echo "A_RECORD=$A_RECORD" >>$GITHUB_ENV
         #デバッグやります。
         echo "CNAMEレコード:$RECORD"
         echo "Aレコード:$A_RECORD"
      #ホスト名を指定したリクエスト送信
      #curlコマンド
      - name: TRequest
        run: |
         echo "TRequest to https://$RECORD"
         RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Host: $DEFAULT_DOMAIN" "https://$RECORD")
         echo "TRUE_STATUS_CODE=$RESPONSE" >> $GITHUB_ENV
      #-Hを使用し、ホストに雑なものをぶち込む
      - name: FRequest
        run: |
         RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" -H "Host: example.com" "https://$RECORD") 
         echo "FALSE_STATUS_CODE=$RESPONSE" >> $GITHUB_ENV
      #-JSONにデータを追加するかの判定を行う。なお、TR/FRの結果が違う際に追加
      - name: Data orthopaedy
        if: ${{env.TRUE_STATUS_CODE != env.FALSE_STATUS_CODE}} 
      #検知可能なのでレコードから正規表現のデータを作成
      #pythonで実装したものを実行
        run: |
          data=$( python3 <<EOF
          import os
          record = os.environ["RECORD"]
          count = record.count(".")
          #データの正規表現化
          TempData=""
          flag=True
          if count >= 2:
            for i in range(0,len(record)):
              if record[i] =="." and flag:
                TempData = "^[a-z0-9]+\\\." #この部分では前文字列を正規表現化するため =　で正しい。
                flag= False
              elif record[i] == ".":
                TempData += "\\\."
              else:
                TempData += record[i]
          else:
            for i in range(0,len(record)):
              if record[i] =="." :
                TempData += "\\\."
              else:
                TempData += record[i]
          TempData += "?$"
          print(TempData, end="")
          EOF
          )
          echo "SETDATA=$data" >> $GITHUB_ENV
      #JSONファイル内に同様のデータがないかを確認する
      - name: JSON Check
        run: |
          FILE="./core/src/main/resources/checkfile/DefineCheck.json"
          NEW_RECORD="$SETDATA"
          NEW_A_RECORD="$A_RECORD"
          
          CNAME_EXISTS=$(jq --arg pattern "$NEW_RECORD" '[.[] | .CNAMEIdentifier? // [] | map(test($pattern))| any]' "$FILE")
          ARECORD_EXISTS=$(jq --arg value "$NEW_A_RECORD" '[.[] | .ARecordIdentifier? // [] | map(. == $value)| any]' "$FILE")
          if [ "$CNAME_EXISTS" = "true" ] || [ "$ARECORD_EXISTS" = "true" ]; then
            echo "存在しています。"
          else
            echo "サービスを追加します。"
            NEW_ENTRY=$(jq -n \
              --arg cname "$NEW_RECORD" \
              --arg arecord "$NEW_A_RECORD" \
              '{
                Name: "Automationed",
                ServiceHost: "",
                PassStatus: false,
                CNAMEIdentifier: [$cname],
                ARecordIdentifier: [$arecord]
              }')

            TMP=$(mktemp)
            jq ". += [$NEW_ENTRY]" "$FILE" > "$TMP" && mv "$TMP" "$FILE"
            echo "JSON内にデータ追加 $FILE"
          fi
          

    #GitHubリポジトリ内に反映
      - name: commit
        run:  |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"

          git add ./core/src/main/resources/checkfile/DefineCheck.json

          if git diff --cached --quiet; then
            echo "既に登録されているデータ"
          else
            git commit -m "対応クラウドサービスを追加"
            git pull --rebase origin ${{ github.head_ref }}
            git push origin HEAD:${{ github.head_ref}}
          fi
    
  
